@page
@using Badminton.Common
@using Badminton.Data.Models
@model Badminton.RazorWebApp.Pages.OrderPage.IndexModel

@{
    ViewData["Title"] = "Index";
}
@if (TempData["message"] != null)
{
    <div class="alert alert-danger">
        @TempData["message"]
    </div>
}
<h1>Index</h1>

@if (Helpers.GetValueFromSession("cus", out Customer cus, HttpContext) && cus.Name.Equals("admin") && cus.Email.Equals("admin@example.com"))
{
    <p>
        <a asp-page="Create">Create New</a>
    </p>
}
<form asp-asp-page="./Index" method="get">
    <div class="form-actions no-color">
        <p>
            <form method="get" class="form-inline">
                <input type="hidden" name="newCurPage" value="1" />
                <table>
                    <thead>
                        <tr>
                            <th>Search by string</th>
                            <th>Amount Range From</th>
                            <th>To</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><input name="note" value="@Model.NoteSearching" /></td>
                            <td><input name="start" value="@Model.Start" /></td>
                            <td><input name="end" value="@Model.End" /></td>
                            <td><button type="submit" class="btn btn-outline-primary">Search</button></td>
                        </tr>
                    </tbody>
                </table>
            </form>
            <a asp-page="./Index">Back to full List</a>
        </p>
    </div>
</form>
@if (Model.Orders == null || Model.Orders.Count == 0)
{
    <p>No order contains this searching string</p>
}else
{
    <table class="table">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(model => model.Orders[0].Type)</th>
                <th>@Html.DisplayNameFor(model => model.Orders[0].TotalAmount)</th>
                <th>@Html.DisplayNameFor(model => model.Orders[0].Customer.Name)</th>
                <th>@Html.DisplayNameFor(model => model.Orders[0].Customer.Address)</th>
                <th>@Html.DisplayNameFor(model => model.Orders[0].Customer.DateOfBirth)</th>
                <th>@Html.DisplayNameFor(model => model.Orders[0].Customer.Email)</th>
                <th>@Html.DisplayNameFor(model => model.Orders[0].Customer.Phone)</th>
                <th>@Html.DisplayNameFor(model => model.Orders[0].OrderDate)</th>
                <th>@Html.DisplayNameFor(model => model.Orders[0].OrderNotes)</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Orders)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Type)</td>
                    <td>@Html.DisplayFor(modelItem => item.TotalAmount)</td>
                    <td>@Html.DisplayFor(modelItem => item.Customer.Name)</td>
                    <td>@Html.DisplayFor(modelItem => item.Customer.Address)</td>
                    <td>@Html.DisplayFor(modelItem => item.Customer.DateOfBirth)</td>
                    <td>@Html.DisplayFor(modelItem => item.Customer.Email)</td>
                    <td>@Html.DisplayFor(modelItem => item.Customer.Phone)</td>
                    <td>@Html.DisplayFor(modelItem => item.OrderDate)</td>
                    <td>@Html.DisplayFor(modelItem => item.OrderNotes)</td>
                    <td>
                        @if (cus.Name.Equals("admin") && cus.Email.Equals("admin@example.com"))
                        {
                            <div>
                                <a asp-page="./Edit" asp-route-id="@item.OrderId">Edit</a> |
                                <a asp-page="./Delete" asp-route-id="@item.OrderId">Delete</a> |
                            </div>
                        }
                        <a asp-page="../OrderDetailPage/Index" asp-route-orderID="@item.OrderId">Details</a>  
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="d-flex justify-content-between">
        <form method="get" class="form-inline">
            <input type="hidden" name="newCurPage" value="@(Model.CurrentPage - 1)" />
            <input type="hidden" name="note" value="@Model.NoteSearching" />
            <input name="start" value="@Model.Start" hidden />
            <input name="end" value="@Model.End" hidden />
            <button type="submit" class="btn btn-outline-primary" @(Model.CurrentPage <= 1 ? "disabled" : "")>Previous</button>
        </form>

        <span>Page @Model.CurrentPage of @Model.TotalPages</span>

        <form method="get" class="form-inline">
            <input type="hidden" name="newCurPage" value="@(Model.CurrentPage + 1)" />
            <input type="hidden" name="note" value="@Model.NoteSearching" />
            <input name="start" value="@Model.Start" hidden />
            <input name="end" value="@Model.End" hidden />
            <button type="submit" class="btn btn-outline-primary" @(Model.CurrentPage >= Model.TotalPages ? "disabled" : "")>Next</button>
        </form>
    </div>
}